stages:
  - prepare
  - build
  - docker
  - deploy


version:
  stage: prepare
  needs: [ ]
  script:
    - APP_VERSION=$(sed -n -e '/app_version/ s/.*\= *//p' gradle.properties)
    - |
      case "$CI_COMMIT_BRANCH" in
        release/*)
          BUILD_VERSION="$APP_VERSION.$CI_PIPELINE_ID"
          IMAGE_NAME="$DOCKER_REPO_USER/reference-snapshot"
          K8S_PROFILE="test"
        ;;
        *)
          BUILD_VERSION="$APP_VERSION.$CI_PIPELINE_ID-SNAPSHOT"
          IMAGE_NAME="$DOCKER_REPO_USER/reference-snapshot"
          K8S_PROFILE="dev"
        ;;
      esac
      K8S_NAMESPACE="reference-$K8S_PROFILE"
    - echo "BUILD_VERSION=${BUILD_VERSION}" >> version.env
    - echo "IMAGE_NAME=${IMAGE_NAME}" >> version.env
    - echo "K8S_PROFILE=${K8S_PROFILE}" >> version.env
    - echo "K8S_NAMESPACE=${K8S_NAMESPACE}" >> version.env
    - cat version.env
  artifacts:
    reports:
      dotenv:
        - ./version.env
    expire_in: 1 day


build-back:
  stage: build
  needs:
    - job: version
      artifacts: true
  image: gradle:jdk21-alpine
  variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle_home
  script:
    - ./gradlew -Pversion=$BUILD_VERSION :app:build
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
#    reports:
#      junit: app/build/test-results/test/**/TEST-*.xml
    paths:
      - app/build/libs/*
    expire_in: 1 day
  cache:
    - key: conf-cache
      paths:
        - .gradle/configuration-cache
    - key: dep-cache
      paths:
        - .gradle_home


docker-build:
  stage: docker
  needs:
    - job: version
      artifacts: true
    - job: build-back
      artifacts: true
  image:
    name: gcr.io/kaniko-project/executor:debug
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$DOCKER_REPO_HOST\":{\"auth\":\"$(printf "%s:%s" "$DOCKER_REPO_USER" "$DOCKER_REPO_PASS" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - >-
      /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/app/deploy/Dockerfile
      --destination $IMAGE_NAME:$BUILD_VERSION
      --digest-file=/kaniko/.docker/digest-file
    - IMAGE_DIGEST="$(grep "${1}" /kaniko/.docker/digest-file | cut -d':' -f2)"
    - echo "IMAGE_DIGEST=${IMAGE_DIGEST}" >> digest.env
  artifacts:
    reports:
      dotenv:
        - ./digest.env
    expire_in: 1 day


deploy:
  stage: deploy
  needs:
    - job: version
      artifacts: true
    - job: docker-build
      artifacts: true
  image: alpine/helm
  before_script:
    - echo "*** deploy to $K8S_PROFILE ***"
    - export KUBECONFIG=$K8S_AUTH_FILE
  script:
    - helm upgrade
      --debug
      --install reference-app app/deploy/helm-chart/
      --set image.name=$IMAGE_NAME
      --set image.digest=$IMAGE_DIGEST
      --set global.env=$K8S_PROFILE
      --set global.namespace=$K8S_NAMESPACE
      --namespace $K8S_NAMESPACE


deploy-prod:
  stage: deploy
  needs:
    - job: version
      artifacts: true
    - job: docker-build
      artifacts: true
    - job: deploy
      artifacts: false
  only:
    refs:
      - /^release/\.*/
  when: manual
  image: alpine/helm
  before_script:
    - echo "*** deploy to prod ***"
    - export KUBECONFIG=$K8S_AUTH_FILE
  script:
    - helm upgrade
      --install reference-app app/deploy/helm-chart/
      --set image.name=$IMAGE_NAME
      --set image.digest=$IMAGE_DIGEST
      --set global.env=prod
      --set global.namespace=reference-prod
      --namespace reference-prod

